server.port = 8081

spring.application.name=API_apartament
spring.datasource.url=${db_url}
spring.datasource.username=${user}
spring.datasource.password=${password}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.open-in-view=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.mvc.throwExceptionIfNoHandlerFound=true
spring.web.resources.addMappings=false

spring.security.oauth2.client.registration.keycloak.client-id = ${spring.application.name}
spring.security.oauth2.client.registration.keycloak.client-secret = ${keycloak_secret}
spring.security.oauth2.client.registration.keycloak.scope = openid, profile, email
spring.security.oauth2.client.provider.keycloak.issuer-uri = http://localhost:8080/realms/API_apartament
spring.security.oauth2.resourceserver.jwt.issuer-uri = http://localhost:8080/realms/API_apartament
spring.security.oauth2.resourceserver.jwt.jwk-set-uri = ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

server.error.includeStacktrace=never
server.error.include-message=never

public.key=classpath:app.pub
private.key=classpath:app.key

#spring.jpa.show-sql=true
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=src/main/resources/schema.sql